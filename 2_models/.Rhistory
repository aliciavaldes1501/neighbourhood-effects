}
# Variables for text label placement
df.v$angle <- with(df.v, (180/pi) * atan(yvar / xvar))
df.v$hjust = with(df.v, (1 - varname.adjust * sign(xvar)) / 2)
# Base plot
g <- ggplot(data = df.u, aes(x = xvar, y = yvar)) +
xlab(u.axis.labs[1]) + ylab(u.axis.labs[2]) + coord_equal()
if(var.axes) {
# Draw either labels or points
if(!is.null(df.u$labels)) {
if(!is.null(df.u$groups)) {
g <- g + geom_text(aes(label = labels, color = groups),
size = labels.size)
} else {
g <- g + geom_text(aes(label = labels), size = labels.size)
}
} else {
if(!is.null(df.u$groups)) {
g <- g + geom_point(aes(color = groups), alpha = alpha)
} else {
g <- g + geom_point(alpha = alpha)
}
}
# Overlay a concentration ellipse if there are groups
if(!is.null(df.u$groups) && ellipse) {
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- cbind(cos(theta), sin(theta))
ell <- ddply(df.u, 'groups', function(x) {
if(nrow(x) < 2) {
return(NULL)
} else if(nrow(x) == 2) {
sigma <- var(cbind(x$xvar, x$yvar))
} else {
sigma <- diag(c(var(x$xvar), var(x$yvar)))
}
mu <- c(mean(x$xvar), mean(x$yvar))
ed <- sqrt(qchisq(ellipse.prob, df = 2))
data.frame(sweep(circle %*% chol(sigma) * ed, 2, mu, FUN = '+'),
groups = x$groups[1])
})
names(ell)[1:2] <- c('xvar', 'yvar')
g <- g + geom_path(data = ell, aes(color = groups, group = groups))
}
# Label the variable axes
if(var.axes) {
g <- g +
geom_text(data = df.v,
aes(label = varname, x = xvar, y = yvar,
angle = angle, hjust = hjust),
color = 'black',fontface='bold',size = varname.size)
}
# Draw circle
if(circle)
{
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- data.frame(xvar = r * cos(theta), yvar = r * sin(theta))
g <- g + geom_path(data = circle, color ='black',
size = 0.5, alpha = 1,linetype=1)
}
# Draw directions
g <- g +
geom_segment(data = df.v,
aes(x = 0, y = 0, xend = xvar, yend = yvar),
arrow = arrow(length = unit(1, 'picas')),
color = 'black', size = 1)
}
# Change the name of the legend for groups
# if(!is.null(groups)) {
#   g <- g + scale_color_brewer(name = deparse(substitute(groups)),
#                               palette = 'Dark2')
# }
# TODO: Add a second set of axes
return(g)
}
ggbiplot1(pca_ants, choices = 1:2, scale = 1,
obs.scale = 1, var.scale = 1,alpha=1,varname.size=5,varname.adjust=2,
ellipse = TRUE, circle = TRUE)
pcaplot1<-ggbiplot1(pca_ants, choices = 1:2, scale = 1,
obs.scale = 1, var.scale = 1,alpha=1,varname.size=5,varname.adjust=2,
ellipse = TRUE, circle = TRUE)
pcaplot1
pcaplot1
plot(pcaplot1())
plot(pcaplot1
)
ggbiplot1=
function(pcobj, choices = 1:2, scale = 1, pc.biplot = TRUE,
obs.scale = 1 - scale, var.scale = scale,
groups = NULL, ellipse = FALSE, ellipse.prob = 0.68,
labels = NULL, labels.size = 3, alpha = 1,
var.axes = TRUE,
circle = FALSE, circle.prob = 0.69,
varname.size = 3, varname.adjust = 1.5,
varname.abbrev = FALSE, ...)
{
library(ggplot2)
library(plyr)
library(scales)
library(grid)
stopifnot(length(choices) == 2)
# Recover the SVD
if(inherits(pcobj, 'prcomp')){
nobs.factor <- sqrt(nrow(pcobj$x) - 1)
d <- pcobj$sdev
u <- sweep(pcobj$x, 2, 1 / (d * nobs.factor), FUN = '*')
v <- pcobj$rotation
} else if(inherits(pcobj, 'princomp')) {
nobs.factor <- sqrt(pcobj$n.obs)
d <- pcobj$sdev
u <- sweep(pcobj$scores, 2, 1 / (d * nobs.factor), FUN = '*')
v <- pcobj$loadings
} else if(inherits(pcobj, 'PCA')) {
nobs.factor <- sqrt(nrow(pcobj$call$X))
d <- unlist(sqrt(pcobj$eig)[1])
u <- sweep(pcobj$ind$coord, 2, 1 / (d * nobs.factor), FUN = '*')
v <- sweep(pcobj$var$coord,2,sqrt(pcobj$eig[1:ncol(pcobj$var$coord),1]),FUN="/")
} else {
stop('Expected a object of class prcomp, princomp or PCA')
}
# Scores
df.u <- as.data.frame(sweep(u[,choices], 2, d[choices]^obs.scale, FUN='*'))
# Directions
v <- sweep(v, 2, d^var.scale, FUN='*')
df.v <- as.data.frame(v[, choices])
names(df.u) <- c('xvar', 'yvar')
names(df.v) <- names(df.u)
if(pc.biplot) {
df.u <- df.u * nobs.factor
}
# Scale the radius of the correlation circle so that it corresponds to
# a data ellipse for the standardized PC scores
r <- sqrt(qchisq(circle.prob, df = 2)) * prod(colMeans(df.u^2))^(1/4)
# Scale directions
v.scale <- rowSums(v^2)
df.v <- r * df.v / sqrt(max(v.scale))
# Change the labels for the axes
if(obs.scale == 0) {
u.axis.labs <- paste('standardized PC', choices, sep='')
} else {
u.axis.labs <- paste('PC', choices, sep='')
}
# Append the proportion of explained variance to the axis labels
u.axis.labs <- paste(u.axis.labs,
sprintf('(%0.1f%% explained var.)',
100 * pcobj$sdev[choices]^2/sum(pcobj$sdev^2)))
# Score Labels
if(!is.null(labels)) {
df.u$labels <- labels
}
# Grouping variable
if(!is.null(groups)) {
df.u$groups <- groups
}
# Variable Names
if(varname.abbrev) {
df.v$varname <- abbreviate(rownames(v))
} else {
df.v$varname <- rownames(v)
}
# Variables for text label placement
df.v$angle <- with(df.v, (180/pi) * atan(yvar / xvar))
df.v$hjust = with(df.v, (1 - varname.adjust * sign(xvar)) / 2)
# Base plot
g <- ggplot(data = df.u, aes(x = xvar, y = yvar)) +
xlab(u.axis.labs[1]) + ylab(u.axis.labs[2]) + coord_equal()
if(var.axes) {
# Draw either labels or points
if(!is.null(df.u$labels)) {
if(!is.null(df.u$groups)) {
g <- g + geom_text(aes(label = labels, color = groups),
size = labels.size)
} else {
g <- g + geom_text(aes(label = labels), size = labels.size)
}
} else {
if(!is.null(df.u$groups)) {
g <- g + geom_point(aes(color = groups), alpha = alpha)
} else {
g <- g + geom_point(alpha = alpha)
}
}
# Overlay a concentration ellipse if there are groups
if(!is.null(df.u$groups) && ellipse) {
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- cbind(cos(theta), sin(theta))
ell <- ddply(df.u, 'groups', function(x) {
if(nrow(x) < 2) {
return(NULL)
} else if(nrow(x) == 2) {
sigma <- var(cbind(x$xvar, x$yvar))
} else {
sigma <- diag(c(var(x$xvar), var(x$yvar)))
}
mu <- c(mean(x$xvar), mean(x$yvar))
ed <- sqrt(qchisq(ellipse.prob, df = 2))
data.frame(sweep(circle %*% chol(sigma) * ed, 2, mu, FUN = '+'),
groups = x$groups[1])
})
names(ell)[1:2] <- c('xvar', 'yvar')
g <- g + geom_path(data = ell, aes(color = groups, group = groups))
}
# Label the variable axes
if(var.axes) {
g <- g +
geom_text(data = df.v,
aes(label = varname, x = xvar, y = yvar,
angle = angle, hjust = hjust),
color = 'black',fontface='bold',size = varname.size)
}
# Draw circle
if(circle)
{
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- data.frame(xvar = r * cos(theta), yvar = r * sin(theta))
g <- g + geom_path(data = circle, color ='black',
size = 0.5, alpha = 1,linetype=1)
}
# Draw directions
g <- g +
geom_segment(data = df.v,
aes(x = 0, y = 0, xend = xvar, yend = yvar),
arrow = arrow(length = unit(1, 'picas')),
color = 'black', size = 1)
}
# Change the name of the legend for groups
# if(!is.null(groups)) {
#   g <- g + scale_color_brewer(name = deparse(substitute(groups)),
#                               palette = 'Dark2')
# }
# TODO: Add a second set of axes
return(g)
}
pcaplot1<-ggbiplot1(pca_ants, choices = 1:2, scale = 1,
obs.scale = 1, var.scale = 1,alpha=1,varname.size=5,varname.adjust=2,
ellipse = TRUE, circle = TRUE)
pcaplot1
pcaplot1<-ggbiplot1(pca_ants, choices = 1:2, scale = 1,
obs.scale = 1, var.scale = 1,alpha=1,varname.size=5,varname.adjust=2,
ellipse = TRUE, circle = TRUE)+
geom_hline(yintercept=0, colour="grey55") +
geom_vline(xintercept=0, colour="grey55") +
theme(axis.title = element_text(family = "serif",size=20),
axis.text = element_text(family = "serif",size=20),
panel.grid.minor=element_blank(), panel.grid.major=element_blank())+
theme(legend.key = element_rect(colour = 'white', fill = 'white', size = 0.5))+
theme(legend.text = element_text(size = 18, family = 'serif'))+
theme(legend.title = element_text(size = 18, family = 'serif', face = 'bold'))
pcaplot1<-ggbiplot1(pca_ants, choices = 1:2, scale = 1,
obs.scale = 1, var.scale = 1,alpha=1,varname.size=5,varname.adjust=2,
ellipse = TRUE, circle = TRUE)+
geom_hline(yintercept=0, colour="grey55") +
geom_vline(xintercept=0, colour="grey55") +
theme(axis.title = element_text(family = "serif",size=20),
axis.text = element_text(family = "serif",size=20),
panel.grid.minor=element_blank(), panel.grid.major=element_blank())+
theme(legend.key = element_rect(colour = 'white', fill = 'white', size = 0.5))+
theme(legend.text = element_text(size = 18, family = 'serif'))+
theme(legend.title = element_text(size = 18, family = 'serif', face = 'bold'))
pcaplot1
?biplot
biplot(pca_ants,col=grey)
biplot(pca_ants,col="grey")
biplot(pca_ants,col="grey")
biplot(pca_ants,col=c("grey","black"))
pca_ants
summary(pca_ants)
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[44:47])
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
?prcomp
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[44:47],scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[44:48,scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
#model with all plants
#binomial model - attack ####
summary(glm(attack ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[44:48,scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[44:48],scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
library(vegan)
?dca
?vegan
?rda
biplot(pca_ants,col=c("grey","black"))
names(allplants)
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[49:53],scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[c(44:48,57)],scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[c(44:48,59)],scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[44:48],scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
?piecewiseSEM
??piecewiseSEM
names(allplants)
head8as.data.table(allplants[c(1,44:48)]))
head8as.data.table(allplants[c(1,44:48)])
head(as.data.table(allplants[c(1,44:48)])
#model with all plants
#binomial model - attack ####
summary(glm(attack ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(allM_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(allM_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(allM_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(allM_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(allM_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~Mrub_sum, subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~allM_sum, subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~Msca_sum, subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~Mrug_sum, subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~Msch_sum, subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~oth_sum, subset(allplants,!is.na(phen)),family="binomial"))
#negative binomial model - number of eggs when present ####
model2all_allM<-glm.nb(n_eggs_max ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(allM_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)&n_eggs_max>0))
summary(model2all_allM)
NagelkerkeR2(model2all_allM)
head(as.data.table(allplants[c(1,44:48)]))
head(as.data.frame(allplants[c(1,44:48)]))
names(allplants)
head(as.data.frame(allplants[c(1,42:46)]))
head(as.data.frame(subset(allplants,!is.na(phen)))[c(1,44:48)])
env<-as.data.frame(subset(allplants,!is.na(phen)))[c(1,35,40)]
head(env)
env<-as.data.frame(subset(allplants,!is.na(phen)))[c(1,37,42)]
head(env)
dbRDA1 <- capscale(comm ~ meanTday+moist_per, env,distance="bray")
library(vegan)
dbRDA1 <- capscale(comm ~ meanTday+moist_per, env,distance="bray")
library(vegan)
comm<-as.data.frame(subset(allplants,!is.na(phen)))[c(1,44:48)]
env<-as.data.frame(subset(allplants,!is.na(phen)))[c(1,37,42)]
dbRDA1 <- capscale(comm ~ meanTday+moist_per, env,distance="bray")
dbRDA1
head(summary(dbRDA1, scaling=1))
ordiplot(dbRDA1,type="text",display=c("species","bp"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(allM_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(allM_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(Mrub_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(Mrub_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(Msche_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(Msche_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(Msch_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(Msch_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(Mrub_sum+Msch_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(Mrub_sum+Msch_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(Mrub_sum+Mrug_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(Mrub_sum+Mrug_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~ scale(as.integer(phen)) + scale(Mrub_sum+Msca_sum) + scale(pldens_2) +
scale(phen_n2) + scale(as.integer(phen)):scale(Mrub_sum+Msca_sum) +
scale(as.integer(phen)):scale(phen_n2) + scale(pldens_2):scale(phen_n2),
subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~allM_sum, subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~Mrub_sum, subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~scale(allM_sum), subset(allplants,!is.na(phen)),family="binomial")) #-0.052550
summary(glm(attack ~scale(allM_sum), subset(allplants,!is.na(phen)),family="binomial")) #-0.052550
summary(glm(attack ~scale(Mrub_sum), subset(allplants,!is.na(phen)),family="binomial")) #0.08092
summary(glm(attack ~scale(Msca_sum), subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~scale(Mrug_sum), subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~scale(Msch_sum), subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~scale(oth_sum), subset(allplants,!is.na(phen)),family="binomial"))
summary(glm(attack ~scale(Mrub_sum)+scale(Msca_sum)+scale(Mrug_sum)+scale(Msch_sum)+
scale(oth_sum), subset(allplants,!is.na(phen)),family="binomial")) #0.17423
summary(glm(attack ~scale(Mrub_sum)*scale(Mrug_sum)+scale(Msca_sum):scale(Mrug_sum)+
scale(Msch_sum):scale(Mrug_sum)+
scale(oth_sum):scale(Mrug_sum), subset(allplants,!is.na(phen)),family="binomial")) #
summary(glm(attack ~scale(Mrub_sum)*scale(Mrug_sum)+scale(Msca_sum)*scale(Mrug_sum)+
scale(Msch_sum)*scale(Mrug_sum)+
scale(oth_sum)*scale(Mrug_sum), subset(allplants,!is.na(phen)),family="binomial")) #
summary(glm(attack ~scale(Mrub_sum)*scale(Mrug_sum)+scale(Msca_sum)*scale(Mrub_sum)+
scale(Msch_sum)*scale(Mrub_sum)+scale(oth_sum)*scale(Mrub_sum),
subset(allplants,!is.na(phen)),family="binomial")) #Mrug interactions w all others
pca_ants<-prcomp(as.data.frame(subset(allplants,!is.na(phen)))[44:47],scale=T)
plot(pca_ants)
biplot(pca_ants,col=c("grey","black"))
summary(pca_ants)
load("ME.model1all_vectors.R")
ME.model1all_vectors
?load
read("ME.model1all_vectors.R")
load(file="ME.model1all_vectors.R")
ME.model1all_vectors
load(file="ME.model1all_vectors.R")
ME.model1all_vectors
ME.model1all
load(file="moran2.R")
moran2
ls()
load(file="ME.model1all_vectors.R")
ME.model1all_vectors
load(file="vector1.R")
load(file="vector2.R")
plot(vector1)
plot(vector2)
head(vector1)
model1all_ME<-glm(attack~scale(as.integer(phen))+scale(Mrub_sum)+
scale(pldens_2)+scale(phen_n2)+
scale(as.integer(phen)):scale(Mrub_sum)+scale(as.integer(phen)):scale(phen_n2)+
scale(pldens_2):scale(phen_n2)+scale(vector1)+scale(vector2),
subset(allplants,!is.na(phen)),family="binomial")
summary(model1all_ME)
NagelkerkeR2(model1all_ME)
library(fmsb)
NagelkerkeR2(model1all_ME)
res_model1all_ME<-residuals(model1all_ME)
moran_model1all_ME<-moran2
moran_model1all_ME
plot(res_model1all_ME)
plot(res_model1all)
plot(correlog_model1all)
library(MASS)
library(fmsb)
library(gstat)
library(car)
library(spdep)
library(ncf)
library(nlme)
library(ggthemes)
plot(correlog_model1all)
?globalG.test
globalG_model1all_ME<-globalG.test(res_model1all_ME, listw=allplants.listw1)
?sp.correlogram
class(allplants.listw1)
plot(sp.correlogram(allplants.listw1,var=res_model1all_ME,method="I"))
plot(sp.correlogram(allplants.listw1,var=res_model1all_ME,method="I")
)
plot(sp.correlogram(neighbours=allplants.listw1,var=res_model1all_ME,method="I")
)
plot(sp.correlogram(neighbours=allplants.nb1,var=res_model1all_ME,method="I"))
plot(sp.correlogram(neighbours=allplants.nb1,var=res_model1all_ME,method="I",maxlag=5))
plot(sp.correlogram(neighbours=allplants.nb1,var=res_model1all_ME,method="I",order=5))
library(MASS)
library(fmsb)
library(gstat)
library(car)
library(spdep)
library(ncf)
library(nlme)
library(ggthemes)
correlog_model1all_ME <- correlog(subset(allplants,!is.na(phen))$x,
subset(allplants,!is.na(phen))$y,
res_model1all_ME,increment=5, resamp=100) #Rerun with 1000
library(MASS)
library(fmsb)
library(gstat)
library(car)
library(spdep)
library(ncf)
library(nlme)
library(ggthemes)
moran_model1all_ME #NO SIGNIFICANT AUTOCORRELATION LEFT!!! :) :) :)
correlog_model1all_ME
plot(correlog_model1all_ME)
abline(h=0)
load(file="vector1.R")
plot(correlog_model1all)
plot(correlog_model1all_ME)
with(allplants,hist(M_rug_sum))
with(allplants,hist(Mrug_sum))
names(allplants)
hist(allplants$Mrug_sum)
hist(allplants$Mrug_sum,breaks=50)
hist(allplants$Mrub_sum,breaks=50)
str(subset(allplants,Mrug_sum==0))
1506/8848
str(subset(allplants,Mrub_sum==0))
5971/8848
plot(correlog_model1all_ME)
abline(h=0)
summary(model1all_ME)
NagelkerkeR2(model1all_ME)
moran_model1all_ME #NO SIGNIFICANT AUTOCORRELATION LEFT!!! :) :) :)
?correlog
